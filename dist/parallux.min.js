/*!
 * parallux 1.3.0 - Parallax made right. High Performant, smooth & jank Free
 * Copyright (c) 2016 SÃ¶nke Kluth <soenke.kluth@gmail.com> (http://soenkekluth.com/) - https://github.com/soenkekluth/parallux#readme
 * License: MIT
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Parallux"] = factory();
	else
		root["Parallux"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!*********************!*\
  !*** ./parallux.js ***!
  \*********************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _lazyview = __webpack_require__(/*! lazyview */ 1);
	
	var _lazyview2 = _interopRequireDefault(_lazyview);
	
	var _objectAssign = __webpack_require__(/*! object-assign */ 7);
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	var _stylePrefixer = __webpack_require__(/*! style-prefixer */ 8);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var defaults = {
	  lazyView: {},
	  container: '.parallux-container',
	  items: '.parallux-item',
	  relative: true,
	  pov: 0.5
	};
	
	var Parallux = function () {
	  function Parallux(container) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	    _classCallCheck(this, Parallux);
	
	    this.elements = [];
	
	
	    this.container = container;
	    this.options = (0, _objectAssign2.default)({}, defaults, options);
	    this.options.pov = this.container.getAttribute('data-parallux-pov') || this.options.pov;
	    this.options.relative = !!this.container.getAttribute('data-parallux-relative');
	
	    this.state = {
	      rendering: false
	    };
	
	    this.init();
	  }
	
	  _createClass(Parallux, [{
	    key: 'init',
	    value: function init() {
	
	      this.onScroll = this.render.bind(this);
	      this.onResize = this.render.bind(this);
	
	      var children = typeof this.options.items === 'string' ? this.container.querySelectorAll(this.options.items) : this.options.items;
	      this.numElements = children.length;
	
	      this.initialRender = true;
	      this.lazyView = new _lazyview2.default(this.container, this.options.lazyView);
	      this.scroll = this.lazyView.scroll;
	
	      this.viewPort = {
	        width: this.scroll.clientWidth,
	        height: this.scroll.clientHeight
	      };
	
	      for (var i = 0; i < this.numElements; i++) {
	        this.elements[i] = new ParalluxItem(children[i], this.viewPort);
	      }
	
	      this.lazyView.on('enter', this.startRender.bind(this));
	      this.lazyView.on('exit', this.stopRender.bind(this));
	    }
	  }, {
	    key: 'cachePosition',
	    value: function cachePosition() {
	      for (var i = 0; i < this.numElements; i++) {
	        var el = this.elements[i];
	        el.cachePosition(this.lazyView.position.bottom - this.scroll.y);
	      }
	    }
	  }, {
	    key: 'startRender',
	    value: function startRender() {
	
	      if (!this.state.rendering) {
	        if (this.initialRender) {
	
	          this.initialRender = false;
	          this.cachePosition();
	        }
	        this.preRender();
	        this.state.rendering = true;
	        this.scroll.on('scroll:start', this.onScroll);
	        this.scroll.on('scroll:progress', this.onScroll);
	        this.scroll.on('scroll:stop', this.onScroll);
	        this.scroll.on('scroll:resize', this.onResize);
	        this.render();
	      }
	    }
	  }, {
	    key: 'stopRender',
	    value: function stopRender() {
	      if (this.state.rendering) {
	        this.state.rendering = false;
	        this.scroll.off('scroll:start', this.onScroll);
	        this.scroll.off('scroll:progress', this.onScroll);
	        this.scroll.off('scroll:stop', this.onScroll);
	        this.scroll.off('scroll:resize', this.onResize);
	        this.postRender();
	      }
	    }
	  }, {
	    key: 'preRender',
	    value: function preRender() {
	      for (var i = 0; i < this.numElements; i++) {
	        this.elements[i].setWillChange();
	      };
	    }
	  }, {
	    key: 'postRender',
	    value: function postRender() {
	      for (var i = 0; i < this.numElements; i++) {
	        this.elements[i].setStyle((0, _stylePrefixer.getPrefix)('willChange'), null);
	      };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var hdiff = (this.scroll.clientHeight - this.lazyView.position.height) * this.options.pov;
	      var diff = this.lazyView.position.bottom - hdiff - this.scroll.y;
	      var percent = (this.scroll.clientHeight - diff) / this.scroll.clientHeight;
	      for (var i = 0; i < this.numElements; i++) {
	        var top = !this.options.relative ? this.elements[i].position.top : 0;
	        var y = this.elements[i].offset + diff + top;
	        this.elements[i].setState(y, percent);
	      };
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.stopRender();
	      this.lazyView.destory();
	      this.onScroll = null;
	      this.onResize = null;
	      this.elem = null;
	      for (var i = 0; i < this.numElements; i++) {
	        this.elements[i].destroy();
	      }
	      this.numElements = this.elements.length = 0;
	    }
	  }]);
	
	  return Parallux;
	}();
	
	exports.default = Parallux;
	
	var ParalluxItem = function () {
	  function ParalluxItem(node, viewPort) {
	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	    _classCallCheck(this, ParalluxItem);
	
	    this.node = node;
	    this.viewPort = viewPort;
	    this.options = options;
	
	    this.state = {
	      y: 0,
	      percent: 0
	    };
	
	    var attr = node.getAttribute('data-parallux-attr');
	    this.attr = attr ? JSON.parse(attr) : null;
	    this.ratio = parseFloat(node.getAttribute('data-parallux-ratio')) || 0;
	    this.ratioUp = parseFloat(node.getAttribute('data-parallux-ratio-up')) || this.ratio;
	    this.offset = parseFloat(node.getAttribute('data-parallux-offset')) || 0;
	    this.max = parseFloat(node.getAttribute('data-parallux-max'));
	
	    if (!isNaN(this.max)) {
	      this.processValue = this.processMaxValue.bind(this);
	    } else {
	      this.processValue = this.processNullValue.bind(this);
	    }
	  }
	
	  _createClass(ParalluxItem, [{
	    key: 'processNullValue',
	    value: function processNullValue(value) {
	      return value;
	    }
	  }, {
	    key: 'processMaxValue',
	    value: function processMaxValue(value) {
	      if (value < this.max) {
	        return this.max;
	      }
	      return value;
	    }
	  }, {
	    key: 'cachePosition',
	    value: function cachePosition() {
	      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	
	      var rect = this.node.getBoundingClientRect();
	      this.position = {
	        top: rect.top - offset,
	        bottom: rect.bottom - offset
	      };
	    }
	  }, {
	    key: 'setWillChange',
	    value: function setWillChange() {
	      var styles = this.attr ? Object.keys(this.attr) : [];
	      if (styles.indexOf('transform') === -1) {
	        styles.unshift('transform');
	      }
	      for (var i = 0, l = styles.length; i < l; i++) {
	        styles[i] = (0, _stylePrefixer.getPrefix)(styles[i]);
	      }
	      this.setStyle((0, _stylePrefixer.getPrefix)('willChange'), styles.join(','));
	    }
	  }, {
	    key: 'setState',
	    value: function setState(y, percent) {
	
	      if (y < 0) {
	        y *= this.ratioUp /*- (this.offset * this.ratioUp)*/;
	      } else {
	        y *= this.ratio; /* - (this.offset * this.ratio)*/
	      }
	
	      if (this.state.y !== y) {
	        this.state.y = y;
	        this.state.percent = percent;
	        this.render();
	      }
	    }
	  }, {
	    key: 'getStyle',
	    value: function getStyle(entry) {
	      var unit = entry.unit || '';
	      var to = entry.to || 0;
	      var diff = entry.from - to;
	      var value = entry.from - diff * this.state.percent;
	      if (entry.hasOwnProperty('to') && (diff < 0 && value > to || diff > 0 && value < to)) {
	        value = to;
	      }
	      return value + unit;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this = this;
	
	      var transform = 'translateY(' + this.state.y + 'px)';
	      if (this.attr) {
	        Object.keys(this.attr).forEach(function (key) {
	          if (key === 'transform') {
	            Object.keys(_this.attr[key]).forEach(function (tans) {
	              transform += ' ' + tans + '(' + _this.getStyle(_this.attr[key][tans]) + ')';
	            });
	          } else {
	            _this.node.style[(0, _stylePrefixer.getPrefix)(key)] = _this.getStyle(_this.attr[key]);
	          }
	        });
	      }
	      this.node.style[(0, _stylePrefixer.getPrefix)('transform')] = transform;
	    }
	  }, {
	    key: 'setStyle',
	    value: function setStyle(prop, value) {
	      this.node.style[(0, _stylePrefixer.getPrefix)(prop)] = value;
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.node = null;
	      this.options = null;
	    }
	  }]);

	  return ParalluxItem;
	}();

	module.exports = exports['default'];

/***/ },
/* 1 */
/*!**************************************!*\
  !*** ../~/lazyview/dist/lazyview.js ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _eventdispatcher = __webpack_require__(/*! eventdispatcher */ 2);
	
	var _eventdispatcher2 = _interopRequireDefault(_eventdispatcher);
	
	var _scrollfeatures = __webpack_require__(/*! scrollfeatures */ 3);
	
	var _scrollfeatures2 = _interopRequireDefault(_scrollfeatures);
	
	var _lazytaskcreator = __webpack_require__(/*! ./lazytaskcreator */ 6);
	
	var _lazytaskcreator2 = _interopRequireDefault(_lazytaskcreator);
	
	var _objectAssign = __webpack_require__(/*! object-assign */ 7);
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var isPlainObject = function isPlainObject(obj) {
	  return Object.prototype.toString.call(obj) == '[object Object]';
	};
	var isArray = function isArray(arr) {
	  return Object.prototype.toString.call(arr) === '[object Array]';
	};
	var isLazyTaskCreator = function isLazyTaskCreator(obj) {
	  return obj && obj.hasOwnProperty('creator');
	};
	
	var defaults = {
	  ignoreInitial: false,
	  enterClass: '',
	  exitClass: '',
	  init: null,
	  threshold: 0,
	  offsets: null // {myoffset:100}
	};
	
	var getAbsolutBoundingRect = function getAbsolutBoundingRect(el, fixedHeight) {
	  var rect = el.getBoundingClientRect();
	  var height = fixedHeight || rect.height;
	  var top = rect.top + _scrollfeatures2.default.windowY + height;
	  return {
	    top: top,
	    bottom: rect.bottom + _scrollfeatures2.default.windowY - height,
	    height: height,
	    width: rect.width,
	    left: rect.left,
	    right: rect.right
	  };
	};
	
	var getPositionStyle = function getPositionStyle(el) {
	  var style = window.getComputedStyle(el, null);
	  return style.getPropertyValue('position');
	};
	
	var LazyView = function (_EventDispatcher) {
	  _inherits(LazyView, _EventDispatcher);
	
	  _createClass(LazyView, null, [{
	    key: 'apply',
	    value: function apply(elements) {
	
	      if (elements && elements.length) {
	        var collection = new LazyViewCollection();
	
	        for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	          rest[_key - 1] = arguments[_key];
	        }
	
	        for (var i = 0; i < elements.length; i++) {
	          collection.push(new (Function.prototype.bind.apply(LazyView, [null].concat([elements[i]], rest)))());
	        }
	        return collection;
	      }
	
	      return new LazyView(elements, (0, _objectAssign2.default)({}, options), tasks);
	    }
	  }, {
	    key: 'plugin',
	    value: function plugin(creator) {
	      return new _lazytaskcreator2.default(creator);
	    }
	  }]);
	
	  function LazyView() {
	    _classCallCheck(this, LazyView);
	
	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }
	
	    if (!args.length) {
	      throw 'non initialization object';
	    }
	
	    var elements;
	    if (args[0] instanceof window.NodeList) {
	      elements = [].slice.call(args[0], 1);
	      args[0] = args[0][0];
	    }
	
	    var el = args[0].tagName !== undefined ? args[0] : null;
	    var options = {};
	    var tasks = [];
	
	    if (args.length === 2) {
	
	      if (typeof args[1] !== 'undefined') {
	        if (isLazyTaskCreator(args[1])) {
	          tasks.push(args[1]);
	        } else if (isArray(args[1])) {
	          tasks.concat(args[1]);
	        } else if (isPlainObject(args[1])) {
	          options = args[1];
	        }
	      }
	    } else if (args.length === 3) {
	
	      if (typeof args[1] !== 'undefined') {
	        if (isLazyTaskCreator(args[1])) {
	          tasks.push(args[1]);
	        } else if (isArray(args[1])) {
	          tasks = tasks.concat(args[1]);
	        } else if (isPlainObject(args[1])) {
	          options = args[1];
	        }
	      }
	      if (typeof args[2] !== 'undefined') {
	        if (isLazyTaskCreator(args[2])) {
	          tasks.push(args[2]);
	        } else if (isArray(args[2])) {
	          tasks = tasks.concat(args[2]);
	        } else if (isPlainObject(args[2])) {
	          options = args[2];
	        }
	      }
	    }
	
	    var _this = _possibleConstructorReturn(this, (LazyView.__proto__ || Object.getPrototypeOf(LazyView)).call(this, { target: el }));
	
	    _this.el = el;
	    _this.tasks = tasks;
	    _this.options = (0, _objectAssign2.default)({}, defaults, options);
	
	    _this.state = {
	      inView: false,
	      position: getPositionStyle(_this.el)
	    };
	
	    _this.scroll = _scrollfeatures2.default.getInstance(_scrollfeatures2.default.getScrollParent(_this.el));
	    _this.offsetStates = {};
	    _this.offsetKeys = _this.options.offsets ? Object.keys(_this.options.offsets) : null;
	
	    _this.addReadyListener();
	
	    if (elements && elements.length) {
	      var _ret;
	
	      var collection = LazyView.apply.apply(LazyView, [elements].concat(_toConsumableArray(args.splice(1, args.length))));
	      collection.push(_this);
	      return _ret = collection, _possibleConstructorReturn(_this, _ret);
	    }
	    return _this;
	  }
	
	  _createClass(LazyView, [{
	    key: 'addReadyListener',
	    value: function addReadyListener() {
	      var _this2 = this;
	
	      var isInited = false;
	
	      var onComplete = function onComplete(e) {
	        if (e) {
	          e.target.removeEventListener(e.type, onComplete);
	        }
	        if (!isInited) {
	          isInited = true;
	          _this2.init();
	        } else {
	          _this2.update();
	        }
	      };
	
	      window.addEventListener('load', onComplete, false);
	      if (document.readyState !== 'complete') {
	        document.addEventListener("DOMContentLoaded", onComplete, false);
	      } else {
	        onComplete();
	      }
	    }
	  }, {
	    key: 'init',
	    value: function init() {
	
	      this.isInitial = true;
	      this.onScroll = this.onScroll.bind(this);
	      this.onResize = this.update.bind(this);
	
	      var i = -1;
	      while (++i < this.tasks.length) {
	        this.tasks[i].creator(this);
	      }
	
	      this.scroll.on('scroll:start', this.onScroll);
	      this.scroll.on('scroll:progress', this.onScroll);
	      this.scroll.on('scroll:stop', this.onScroll);
	      this.scroll.on('scroll:resize', this.onResize);
	      window.addEventListener('orientationchange', this.onResize, false);
	
	      this.update();
	    }
	  }, {
	    key: 'addOffset',
	    value: function addOffset(name, value) {
	      this.options.offsets = this.options.offsets || {};
	      this.options.offsets[name] = value;
	      this.offsetKeys = Object.keys(this.options.offsets);
	    }
	  }, {
	    key: 'removeOffset',
	    value: function removeOffset(name) {
	      if (this.options.offsets && this.options.offsets.hasOwnProperty(name)) {
	        delete this.options.offsets[name];
	        this.offsetKeys = Object.keys(this.options.offsets);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (this.options.enterClass || this.options.exitClass) {
	        var directionY = this.scroll.directionY;
	        if (this.state.inView) {
	          !!this.options.enterClass && this.el.classList.add(this.options.enterClass, directionY < 1 ? 'view-top' : 'view-bottom');
	          !!this.options.exitClass && this.el.classList.remove(this.options.exitClass);
	        } else {
	          !!this.options.enterClass && this.el.classList.remove(this.options.enterClass, 'view-top', 'view-bottom');
	          !!this.options.exitClass && this.el.classList.add(this.options.exitClass, directionY < 1 ? 'view-top' : 'view-bottom');
	        }
	      }
	    }
	  }, {
	    key: 'onScroll',
	    value: function onScroll() {
	
	      this.updateViewState();
	
	      if (this.offsetKeys) {
	        var keys = this.offsetKeys;
	        var i = -1;
	        var l = keys.length;
	        while (++i < l) {
	          var key = keys[i];
	          var value = this.options.offsets[key];
	
	          if (this.isInView(value)) {
	            if (!this.offsetStates[key]) {
	              this.offsetStates[key] = true;
	              this.dispatch('enter:' + key);
	            }
	          } else {
	            if (this.offsetStates[key]) {
	              this.offsetStates[key] = false;
	              this.dispatch('exit:' + key);
	            }
	          }
	        }
	      }
	    }
	  }, {
	    key: 'update',
	    value: function update() {
	      // this.scroll.update();
	      this.cachePosition();
	      this.onScroll();
	    }
	  }, {
	    key: 'isInView',
	    value: function isInView() {
	      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	
	      if (this.state.position === 'fixed') {
	        return true;
	      }
	      var scrollY = this.scroll.y;
	      return scrollY <= this.position.top - offset && scrollY + this.scroll.clientHeight >= this.position.bottom + offset;
	    }
	  }, {
	    key: 'updateViewState',
	    value: function updateViewState() {
	      if (this.isInView(this.options.threshold)) {
	        if (!this.state.inView) {
	
	          this.setInview(true, !this.options.enterClass);
	
	          if (this.options.init) {
	            this.options.init.call(this);
	          }
	          if (!(this.isInitial && this.options.ignoreInitial)) {
	            this.dispatch(LazyView.ENTER);
	          }
	        }
	      } else {
	        if (this.state.inView) {
	          this.setInview(false, !this.options.enterClass);
	          if (!(this.isInitial && this.options.ignoreInitial)) {
	            this.dispatch(LazyView.EXIT);
	          }
	        }
	      }
	
	      this.isInitial = false;
	    }
	  }, {
	    key: 'cachePosition',
	    value: function cachePosition() {
	      this.position = getAbsolutBoundingRect(this.el);
	    }
	  }, {
	    key: 'setInview',
	    value: function setInview(value, silent) {
	      this.state.inView = value;
	      if (silent !== true) {
	        this.render();
	      }
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	
	      if (this.scroll) {
	        this.scroll.off('scroll:start', this.onScroll);
	        this.scroll.off('scroll:progress', this.onScroll);
	        this.scroll.off('scroll:stop', this.onScroll);
	        this.scroll.off('scroll:resize', this.onResize);
	
	        if (!this.scroll.hasListeners()) {
	          this.scroll.destroy();
	          this.scroll = null;
	        }
	      }
	
	      if (typeof window !== 'undefined') {
	        window.removeEventListener('orientationchange', this.onResize);
	      }
	
	      this.onScroll = null;
	      this.onResize = null;
	
	      this.position = null;
	      this.options = null;
	      this.el = null;
	    }
	  }]);
	
	  return LazyView;
	}(_eventdispatcher2.default);
	
	LazyView.ENTER = 'enter';
	LazyView.EXIT = 'exit';
	exports.default = LazyView;
	
	var LazyViewCollection = function (_EventDispatcher2) {
	  _inherits(LazyViewCollection, _EventDispatcher2);
	
	  function LazyViewCollection() {
	    _classCallCheck(this, LazyViewCollection);
	
	    var _this3 = _possibleConstructorReturn(this, (LazyViewCollection.__proto__ || Object.getPrototypeOf(LazyViewCollection)).call(this));
	
	    _this3.items = [];
	    return _this3;
	  }
	
	  _createClass(LazyViewCollection, [{
	    key: 'push',
	    value: function push(lazyView) {
	      this.items.push(lazyView);
	    }
	  }, {
	    key: 'addListener',
	    value: function addListener(event, listener) {
	      var i = -1;
	      while (++i < this.items.length) {
	        this.items[i].addListener(event, listener);
	      }
	      return this;
	    }
	  }, {
	    key: 'removeListener',
	    value: function removeListener(event, listener) {
	      var i = -1;
	      while (++i < this.items.length) {
	        this.items[i].removeListener(event, listener);
	      }
	      return this;
	    }
	  }]);
	
	  return LazyViewCollection;
	}(_eventdispatcher2.default);
	
	module.exports = exports['default'];

/***/ },
/* 2 */
/*!****************************************************!*\
  !*** ../~/eventdispatcher/dist/eventdispatcher.js ***!
  \****************************************************/
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function isEmpty(obj) {
	  if (obj) {
	    return Object.keys(obj).length === 0;
	  }
	  return true;
	}
	
	var EventDispatcher = function () {
	  function EventDispatcher() {
	    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        target = _ref.target,
	        currentTarget = _ref.currentTarget;
	
	    _classCallCheck(this, EventDispatcher);
	
	    this.target = target || this;
	    this.currentTarget = currentTarget || this;
	    this.eventMap = {};
	    this.destroyed = false;
	
	    this.on = this.bind = this.addEventListener = this.addListener;
	    this.off = this.unbind = this.removeEventListener = this.removeListener;
	    this.once = this.one = this.addListenerOnce;
	    this.emit = this.trigger = this.dispatchEvent = this.dispatch;
	  }
	
	  EventDispatcher.prototype.addListener = function addListener(event, listener) {
	    var listeners = this.getListener(event);
	    if (!listeners) {
	      this.eventMap[event] = [listener];
	    } else if (listeners.indexOf(listener) === -1) {
	      listeners.push(listener);
	    }
	    return this;
	  };
	
	  EventDispatcher.prototype.addListenerOnce = function addListenerOnce(event, listener) {
	    var _this = this;
	
	    var f2 = function f2(e) {
	      listener(e);
	      _this.off(event, f2);
	    };
	    return this.on(event, f2);
	  };
	
	  EventDispatcher.prototype.removeListener = function removeListener(event, listener) {
	    if (!listener) {
	      return this.removeAllListener(event);
	    }
	
	    var listeners = this.getListener(event);
	    if (listeners) {
	      var i = listeners.indexOf(listener);
	      if (i > -1) {
	        listeners.splice(i, 1);
	        if (!listeners.length) {
	          delete this.eventMap[event];
	        }
	      }
	    }
	    return this;
	  };
	
	  EventDispatcher.prototype.removeAllListener = function removeAllListener(event) {
	    var listeners = this.getListener(event);
	    if (listeners) {
	      this.eventMap[event].length = 0;
	      delete this.eventMap[event];
	    }
	    return this;
	  };
	
	  EventDispatcher.prototype.hasListener = function hasListener(event) {
	    return this.getListener(event) !== null;
	  };
	
	  EventDispatcher.prototype.hasListeners = function hasListeners() {
	    return this.eventMap !== null && this.eventMap !== undefined && !isEmpty(this.eventMap);
	  };
	
	  EventDispatcher.prototype.dispatch = function dispatch(eventType, eventObject) {
	    var listeners = this.getListener(eventType);
	
	    if (listeners) {
	      var evtObj = eventObject || {};
	      evtObj.type = eventType;
	      evtObj.target = evtObj.target || this.target;
	      evtObj.currentTarget = evtObj.currentTarget || this.currentTarget;
	
	      var i = -1;
	      while (++i < listeners.length) {
	        listeners[i](evtObj);
	      }
	    }
	    return this;
	  };
	
	  EventDispatcher.prototype.getListener = function getListener(event) {
	    var result = this.eventMap ? this.eventMap[event] : null;
	    return result || null;
	  };
	
	  EventDispatcher.prototype.destroy = function destroy() {
	    if (this.eventMap) {
	      var keys = Object.keys(this.eventMap);
	      for (var i = 0; i < keys.length; i++) {
	        this.removeAllListener(keys[i]);
	      }
	    }
	
	    this.eventMap = null;
	    this.destroyed = true;
	    return this;
	  };
	
	  return EventDispatcher;
	}();
	
	exports.default = EventDispatcher;
	module.exports = exports["default"];

/***/ },
/* 3 */
/*!*************************************************!*\
  !*** ../~/scrollfeatures/lib/scrollfeatures.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _eventdispatcher = __webpack_require__(/*! eventdispatcher */ 2);
	
	var _eventdispatcher2 = _interopRequireDefault(_eventdispatcher);
	
	var _scrollParent = __webpack_require__(/*! ./scroll-parent */ 4);
	
	var _scrollParent2 = _interopRequireDefault(_scrollParent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var unprefixAnimationFrame = function unprefixAnimationFrame() {
	  if (!window.requestAnimationFrame) {
	    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
	    window.cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;
	  }
	};
	
	var ScrollFeatures = function (_EventDispatcher) {
	  _inherits(ScrollFeatures, _EventDispatcher);
	
	  ScrollFeatures.getInstance = function getInstance(scrollTarget, options) {
	    if (!scrollTarget.scrollFeatures) {
	      return new ScrollFeatures(scrollTarget, options);
	    }
	    return scrollTarget.scrollFeatures;
	  };
	
	  ScrollFeatures.hasInstance = function hasInstance(scrollTarget) {
	    return typeof scrollTarget.scrollFeatures !== 'undefined';
	  };
	
	  ScrollFeatures.getScrollParent = function getScrollParent(element) {
	    return (0, _scrollParent2.default)(element);
	  };
	
	  _createClass(ScrollFeatures, null, [{
	    key: 'windowY',
	    get: function get() {
	      return window.pageYOffset || window.scrollY || 0;
	    }
	  }, {
	    key: 'windowX',
	    get: function get() {
	      return window.pageXOffset || window.scrollX || 0;
	    }
	  }, {
	    key: 'documentHeight',
	    get: function get() {
	      return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);
	    }
	  }, {
	    key: 'documentWidth',
	    get: function get() {
	      return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);
	    }
	  }]);
	
	  function ScrollFeatures() {
	    var scrollTarget = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	    _classCallCheck(this, ScrollFeatures);
	
	    if (ScrollFeatures.hasInstance(scrollTarget)) {
	      var _ret;
	
	      return _ret = ScrollFeatures.getInstance(scrollTarget), _possibleConstructorReturn(_this, _ret);
	    }
	
	    var _this = _possibleConstructorReturn(this, _EventDispatcher.call(this, { target: scrollTarget }));
	
	    _this._scrollTarget = null;
	    _this._y = 0;
	    _this._x = 0;
	    _this._speedY = 0;
	    _this._speedX = 0;
	    _this._lastSpeed = 0;
	    _this._lastDirectionY = ScrollFeatures.direction.none;
	    _this._lastDirectionX = ScrollFeatures.direction.none;
	    _this._stopFrames = 3;
	    _this._currentStopFrames = 0;
	    _this._firstRender = true;
	    _this._directionY = ScrollFeatures.direction.none;
	    _this._directionX = ScrollFeatures.direction.none;
	    _this._scrolling = false;
	    _this._canScrollY = false;
	    _this._canScrollX = false;
	
	
	    scrollTarget.scrollFeatures = _this;
	    _this._scrollTarget = scrollTarget;
	    _this.options = options;
	
	    if (Can.animationFrame) {
	      unprefixAnimationFrame();
	    }
	
	    _this.init();
	    return _this;
	  }
	
	  ScrollFeatures.prototype.init = function init() {
	    var _this2 = this;
	
	    this.getScrollPosition = this._scrollTarget === window ? function () {
	      return { y: ScrollFeatures.windowY, x: ScrollFeatures.windowX };
	    }.bind(this) : function () {
	      return { y: this._scrollTarget.scrollTop, x: this._scrollTarget.scrollLeft };
	    }.bind(this);
	
	    this.onResize = function () {
	      _this2.trigger(ScrollFeatures.events.SCROLL_RESIZE);
	    };
	    this.onScroll = this.onScroll.bind(this);
	    this.onNextFrame = this.onNextFrame.bind(this);
	
	    this.updateScrollPosition();
	
	    if (this._scrollTarget !== window) {
	      var regex = /(auto|scroll)/;
	      var style = window.getComputedStyle(this._scrollTarget, null);
	      this._canScrollY = regex.test(style.getPropertyValue('overflow-y'));
	      this._canScrollX = regex.test(style.getPropertyValue('overflow-x'));
	    } else {
	      this._canScrollY = this.clientHeight < this.scrollHeight;
	      this._canScrollX = this.clientWidth < this.scrollWidth;
	    }
	
	    if (this._scrollTarget.addEventListener) {
	      this._scrollTarget.addEventListener('scroll', this.onScroll, false);
	      this._scrollTarget.addEventListener('resize', this.onResize, false);
	    } else if (this._scrollTarget.attachEvent) {
	      this._scrollTarget.attachEvent('scroll', this.onScroll);
	      this._scrollTarget.attachEvent('resize', this.onResize);
	    }
	  };
	
	  ScrollFeatures.prototype.destroy = function destroy() {
	
	    this._cancelNextFrame();
	
	    _EventDispatcher.prototype.destroy.call(this);
	
	    if (this._scrollTarget) {
	      if (this._scrollTarget.addEventListener) {
	        this._scrollTarget.removeEventListener('scroll', this.onScroll);
	        this._scrollTarget.removeEventListener('resize', this.onResize);
	      } else if (this._scrollTarget.attachEvent) {
	        this._scrollTarget.detachEvent('scroll', this.onScroll);
	        this._scrollTarget.detachEvent('resize', this.onResize);
	      }
	    }
	
	    this.onResize = null;
	    this.onScroll = null;
	    this.getScrollPosition = null;
	    this.onNextFrame = null;
	    delete this._scrollTarget.scrollFeatures;
	    this._scrollTarget = null;
	  };
	
	  ScrollFeatures.prototype.updateScrollPosition = function updateScrollPosition() {
	    this._y = this.y;
	    this._x = this.x;
	  };
	
	  ScrollFeatures.prototype.onScroll = function onScroll() {
	    this._currentStopFrames = 0;
	    if (this._firstRender) {
	      this._firstRender = false;
	      if (this.y > 1 || this.x > 1) {
	        this.updateScrollPosition();
	        this.trigger(ScrollFeatures.events.SCROLL_PROGRESS);
	        return;
	      }
	    }
	
	    if (!this._scrolling) {
	      this._scrolling = true;
	      this._lastDirectionY = ScrollFeatures.direction.none;
	      this._lastDirectionX = ScrollFeatures.direction.none;
	      this.trigger(ScrollFeatures.events.SCROLL_START);
	      if (Can.animationFrame) {
	        this.nextFrameID = window.requestAnimationFrame(this.onNextFrame);
	      } else {
	        this.onNextFrame();
	      }
	    }
	  };
	
	  ScrollFeatures.prototype.onNextFrame = function onNextFrame() {
	    var _this3 = this;
	
	    this._speedY = this._y - this.y;
	    this._speedX = this._x - this.x;
	
	    var speed = +this.speedY + +this.speedX;
	    if (this._scrolling && speed === 0 && this._currentStopFrames++ > this._stopFrames) {
	      this.onScrollStop();
	      return;
	    }
	
	    this.updateScrollPosition();
	
	    if (this._lastDirectionY !== this.directionY) {
	      this.trigger('scroll:' + (this.directionY === ScrollFeatures.direction.down ? 'down' : 'up'));
	    }
	    if (this._lastDirectionX !== this.directionX) {
	      this.trigger('scroll:' + (this.directionX === ScrollFeatures.direction.right ? 'right' : 'left'));
	    }
	
	    this._lastDirectionY = this.directionY;
	    this._lastDirectionX = this.directionX;
	
	    this.trigger(ScrollFeatures.events.SCROLL_PROGRESS);
	
	    if (Can.animationFrame) {
	      this.nextFrameID = window.requestAnimationFrame(this.onNextFrame);
	    } else {
	      this._nextTimeout = setTimeout(function () {
	        _this3.onNextFrame();
	      }, 1000 / 60);
	    }
	  };
	
	  ScrollFeatures.prototype.onScrollStop = function onScrollStop() {
	
	    this._scrolling = false;
	    this.updateScrollPosition();
	
	    this.trigger(ScrollFeatures.events.SCROLL_STOP);
	
	    if (this._canScrollY) {
	      if (this.y <= 0) {
	        this.trigger(ScrollFeatures.events.SCROLL_MIN);
	      } else if (this.y + this.clientHeight >= this.scrollHeight) {
	        this.trigger(ScrollFeatures.events.SCROLL_MAX);
	      }
	    }
	
	    if (this._canScrollX) {
	      if (this.x <= 0) {
	        this.trigger(ScrollFeatures.events.SCROLL_MIN);
	      } else if (this.x + this.clientWidth >= this.scrollWidth) {
	        this.trigger(ScrollFeatures.events.SCROLL_MAX);
	      }
	    }
	
	    this._cancelNextFrame();
	  };
	
	  ScrollFeatures.prototype._cancelNextFrame = function _cancelNextFrame() {
	    this._currentStopFrames = 0;
	    if (Can.animationFrame) {
	      window.cancelAnimationFrame(this.nextFrameID);
	      this.nextFrameID = -1;
	    } else {
	      clearTimeout(this._nextTimeout);
	    }
	  };
	
	  _createClass(ScrollFeatures, [{
	    key: 'scrollPosition',
	    get: function get() {
	      return this.getScrollPosition();
	    }
	  }, {
	    key: 'directionY',
	    get: function get() {
	      if (!this._canScrollY || this.speedY === 0 && !this._scrolling) {
	        this._directionY = ScrollFeatures.direction.none;
	      } else {
	        if (this.speedY > 0) {
	          this._directionY = ScrollFeatures.direction.up;
	        } else if (this.speedY < 0) {
	          this._directionY = ScrollFeatures.direction.down;
	        }
	      }
	      return this._directionY;
	    }
	  }, {
	    key: 'directionX',
	    get: function get() {
	      if (!this._canScrollX || this.speedX === 0 && !this._scrolling) {
	        this._directionX = ScrollFeatures.direction.none;
	      } else {
	        if (this.speedX > 0) {
	          this._directionX = ScrollFeatures.direction.left;
	        } else if (this.speedX < 0) {
	          this._directionX = ScrollFeatures.direction.right;
	        }
	      }
	      return this._directionX;
	    }
	  }, {
	    key: 'scrollTarget',
	    get: function get() {
	      return this._scrollTarget;
	    }
	  }, {
	    key: 'scrolling',
	    get: function get() {
	      return this._scrolling;
	    }
	  }, {
	    key: 'speedY',
	    get: function get() {
	      return this._speedY;
	    }
	  }, {
	    key: 'speedX',
	    get: function get() {
	      return this._speedX;
	    }
	  }, {
	    key: 'canScrollY',
	    get: function get() {
	      return this._canScrollY;
	    }
	  }, {
	    key: 'canScrollX',
	    get: function get() {
	      return this._canScrollX;
	    }
	  }, {
	    key: 'y',
	    get: function get() {
	      return this.scrollPosition.y;
	    }
	  }, {
	    key: 'x',
	    get: function get() {
	      return this.scrollPosition.x;
	    }
	  }, {
	    key: 'clientHeight',
	    get: function get() {
	      return this._scrollTarget === window ? window.innerHeight : this._scrollTarget.clientHeight;
	    }
	  }, {
	    key: 'clientWidth',
	    get: function get() {
	      return this._scrollTarget === window ? window.innerWidth : this._scrollTarget.clientWidth;
	    }
	  }, {
	    key: 'scrollHeight',
	    get: function get() {
	      return this._scrollTarget === window ? ScrollFeatures.documentHeight : this._scrollTarget.scrollHeight;
	    }
	  }, {
	    key: 'scrollWidth',
	    get: function get() {
	      return this._scrollTarget === window ? ScrollFeatures.documentWidth : this._scrollTarget.scrollWidth;
	    }
	  }]);
	
	  return ScrollFeatures;
	}(_eventdispatcher2.default);
	
	ScrollFeatures.direction = {
	  up: -1,
	  down: 1,
	  none: 0,
	  right: 2,
	  left: -2
	};
	ScrollFeatures.events = {
	  SCROLL_PROGRESS: 'scroll:progress',
	  SCROLL_START: 'scroll:start',
	  SCROLL_STOP: 'scroll:stop',
	  SCROLL_DOWN: 'scroll:down',
	  SCROLL_UP: 'scroll:up',
	  SCROLL_MIN: 'scroll:min',
	  SCROLL_MAX: 'scroll:max',
	  SCROLL_RESIZE: 'scroll:resize'
	};
	exports.default = ScrollFeatures;
	
	
	var _animationFrame = null;
	
	var Can = function () {
	  function Can() {
	    _classCallCheck(this, Can);
	  }
	
	  _createClass(Can, null, [{
	    key: 'animationFrame',
	    get: function get() {
	      if (_animationFrame === null) {
	        _animationFrame = !!(window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame);
	      }
	      return _animationFrame;
	    }
	  }]);
	
	  return Can;
	}();
	
	module.exports = exports['default'];

/***/ },
/* 4 */
/*!************************************************!*\
  !*** ../~/scrollfeatures/lib/scroll-parent.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var hasOverflow = __webpack_require__(/*! ./has-overflow */ 5);
	
	var scrollParent = function scrollParent(element) {
	
	  if (!(element instanceof HTMLElement)) {
	    return window;
	  }
	
	  while (element.parentNode) {
	    if (element.parentNode === document.body) {
	      return window;
	    }
	
	    if (hasOverflow(element.parentNode)) {
	      return element.parentNode;
	    }
	    element = element.parentNode;
	  }
	  return window;
	};
	
	module.exports = scrollParent;

/***/ },
/* 5 */
/*!***********************************************!*\
  !*** ../~/scrollfeatures/lib/has-overflow.js ***!
  \***********************************************/
/***/ function(module, exports) {

	'use strict';
	
	var regex = /(auto|scroll)/;
	
	var hasOverflow = function hasOverflow(element) {
	  var style = window.getComputedStyle(element, null);
	  return regex.test(style.getPropertyValue('overflow') + style.getPropertyValue('overflow-y') + style.getPropertyValue('overflow-x'));
	};
	module.exports = hasOverflow;

/***/ },
/* 6 */
/*!*********************************************!*\
  !*** ../~/lazyview/dist/lazytaskcreator.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _objectAssign = __webpack_require__(/*! object-assign */ 7);
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var LazyTaskCreator = function LazyTaskCreator(Task, options) {
	  _classCallCheck(this, LazyTaskCreator);
	
	  this.creator = function (lazyView) {
	    return new Task(lazyView, options);
	  };
	};
	
	exports.default = LazyTaskCreator;
	module.exports = exports['default'];

/***/ },
/* 7 */
/*!***********************************!*\
  !*** ../~/object-assign/index.js ***!
  \***********************************/
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ },
/* 8 */
/*!**************************************************!*\
  !*** ../~/style-prefixer/dist/style-prefixer.js ***!
  \**************************************************/
/***/ function(module, exports) {

	"use strict";
	
	var prefixes = ["ms", "Moz", "Webkit", "O"];
	
	var initialized = false;
	var element = null;
	var actualPrefix = '';
	
	var properties = ['userSelect', 'transform', 'transition', 'transitionend', 'transformOrigin', 'transformStyle', 'transitionProperty', 'transitionDuration', 'transitionTimingFunction', 'transitionDelay', 'borderImage', 'borderImageSlice', 'boxShadow', 'backgroundClip', 'backfaceVisibility', 'perspective', 'perspectiveOrigin', 'animation', 'animationStart', 'animationEnd', 'animationDuration', 'animationName', 'animationDelay', 'animationDirection', 'animationIteration', 'animationIterationCount', 'animationTimingFunction', 'animationPlayState', 'animationFillMode', 'appearance'];
	
	var cache = {};
	var getElement = function getElement() {
	  if (element !== null) {
	    return element;
	  }
	  if (typeof document === 'undefined') {
	    console.warn('prefixer is used without document');
	    return { style: {} };
	  } else {
	    element = document.createElement('div');
	  }
	
	  return element;
	};
	
	var applyVendorPrefix = function applyVendorPrefix(property) {
	  var el = getElement();
	  if (properties.indexOf(property) === -1 || !!el.style[property]) {
	    return property;
	  }
	
	  if (initialized) {
	    return actualPrefix + property;
	  } else {
	    initialized = true;
	    var temp;
	    var prop = property.charAt(0).toUpperCase() + property.slice(1);
	
	    for (var i = 0; i < prefixes.length; i++) {
	      temp = prefixes[i] + prop;
	      if (el.style[temp]) {
	        actualPrefix = prefixes[i].toLocalLowerCase();
	        prefixes = [prefixes[i]];
	        return temp;
	      }
	    }
	  }
	  return property.charAt(0).toLowerCase() + property.slice(1);
	};
	
	var getPrefix = function getPrefix(property) {
	  if (!cache[property]) {
	    cache[property] = applyVendorPrefix(property);
	  }
	  return cache[property];
	};
	
	var prefixer = function prefixer(obj) {
	  var result = {};
	  for (var key in obj) {
	    result[getPrefix(key)] = obj[key];
	  }
	  return result;
	};
	
	exports.getPrefix = getPrefix;
	exports.prefixer = prefixer;
	exports.default = prefixer;

/***/ }
/******/ ])
});
;
//# sourceMappingURL=parallux.min.js.map