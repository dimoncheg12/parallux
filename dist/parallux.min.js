/*!
 * parallux 1.1.0 - Parallax made right
 * Copyright (c) 2016 SÃ¶nke Kluth <soenke.kluth@gmail.com> (http://soenkekluth.com/) - https://github.com/soenkekluth/parallux#readme
 * License: MIT
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Parallux"] = factory();
	else
		root["Parallux"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _lazyview = __webpack_require__(5);

	var _lazyview2 = _interopRequireDefault(_lazyview);

	var _objectAssign = __webpack_require__(1);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	var _stylePrefixer = __webpack_require__(9);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var defaults = {
	  lazyView: {},
	  container: '.parallux-container',
	  items: '.parallux-item'
	};

	var Parallux = function () {
	  function Parallux(container) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    _classCallCheck(this, Parallux);

	    this.elements = [];


	    this.container = container;
	    this.options = (0, _objectAssign2.default)({}, defaults, options);

	    this.state = {
	      rendering: false
	    };

	    this.init();
	  }

	  _createClass(Parallux, [{
	    key: 'init',
	    value: function init() {
	      var _this = this;

	      this.onScroll = this.render.bind(this);
	      this.onResize = this.render.bind(this);

	      var children = typeof this.options.items === 'string' ? this.container.querySelectorAll(this.options.items) : this.options.items;
	      this.numElements = children.length;

	      this.viewPort = {
	        width: window.innerWidth,
	        height: window.innerHeight
	      };

	      for (var i = 0; i < this.numElements; i++) {
	        this.elements[i] = new ParalluxItem(children[i], this.viewPort);
	      }

	      this.initialRender = true;
	      this.lazyView = new _lazyview2.default(this.container, this.options.lazyView);
	      this.scroll = this.lazyView.scroll;

	      this.lazyView.on('enter', this.startRender.bind(this));
	      this.lazyView.on('exit', this.stopRender.bind(this));

	      setTimeout(function () {
	        if (_this.lazyView.state.inView) {
	          _this.startRender();
	        }
	      }, 10);
	    }
	  }, {
	    key: 'cachePosition',
	    value: function cachePosition() {
	      for (var i = 0; i < this.numElements; i++) {
	        var el = this.elements[i];
	        el.cachePosition(this.lazyView.position.bottom);
	      }
	    }
	  }, {
	    key: 'startRender',
	    value: function startRender() {
	      if (!this.state.rendering) {
	        if (this.initialRender) {
	          this.initialRender = false;
	          this.cachePosition();
	        }
	        this.preRender();
	        this.state.rendering = true;
	        this.scroll.on('scroll:start', this.onScroll);
	        this.scroll.on('scroll:progress', this.onScroll);
	        this.scroll.on('scroll:stop', this.onScroll);
	        this.scroll.on('scroll:resize', this.onResize);
	        this.render();
	      }
	    }
	  }, {
	    key: 'stopRender',
	    value: function stopRender() {
	      if (this.state.rendering) {
	        this.state.rendering = false;
	        this.scroll.off('scroll:start', this.onScroll);
	        this.scroll.off('scroll:progress', this.onScroll);
	        this.scroll.off('scroll:stop', this.onScroll);
	        this.scroll.off('scroll:resize', this.onResize);
	        this.postRender();
	      }
	    }
	  }, {
	    key: 'preRender',
	    value: function preRender() {
	      for (var i = 0; i < this.numElements; i++) {
	        this.elements[i].setWillChange();
	      };
	    }
	  }, {
	    key: 'postRender',
	    value: function postRender() {
	      for (var i = 0; i < this.numElements; i++) {
	        this.elements[i].setStyle((0, _stylePrefixer.getPrefix)('willChange'), null);
	      };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var diff = this.lazyView.position.bottom - this.scroll.y;
	      var percent = (this.scroll.clientHeight - diff) / this.scroll.clientHeight;
	      for (var i = 0; i < this.numElements; i++) {
	        this.elements[i].setState(diff, percent);
	      };
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.stopRender();
	      this.lazyView.destory();
	      this.onScroll = null;
	      this.onResize = null;
	      this.elem = null;
	      for (var i = 0; i < this.numElements; i++) {
	        this.elements[i].destroy();
	      }
	      this.numElements = this.elements.length = 0;
	    }
	  }]);

	  return Parallux;
	}();

	exports.default = Parallux;

	var ParalluxItem = function () {
	  function ParalluxItem(node, viewPort) {
	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    _classCallCheck(this, ParalluxItem);

	    this.node = node;
	    this.viewPort = viewPort;
	    this.options = options;

	    this.state = {
	      y: 0,
	      percent: 0
	    };

	    var attr = node.dataset.paralluxAttr;
	    this.attr = attr ? JSON.parse(attr) : null;
	    this.ratio = parseFloat(node.dataset.paralluxRatio) || 0;
	    this.ratioUp = parseFloat(node.dataset.paralluxRatioUp) || this.ratio;
	    this.offset = parseFloat(node.dataset.paralluxOffset) || 0;
	    this.max = parseFloat(node.dataset.paralluxMax);

	    if (!isNaN(this.max)) {
	      this.processValue = this.processMaxValue.bind(this);
	    } else {
	      this.processValue = this.processNullValue.bind(this);
	    }
	  }

	  _createClass(ParalluxItem, [{
	    key: 'processNullValue',
	    value: function processNullValue(value) {
	      return value;
	    }
	  }, {
	    key: 'processMaxValue',
	    value: function processMaxValue(value) {
	      if (value < this.max) {
	        return this.max;
	      }
	      return value;
	    }
	  }, {
	    key: 'cachePosition',
	    value: function cachePosition() {
	      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	      var rect = this.node.getBoundingClientRect();
	      this.position = {
	        top: rect.top - offset,
	        bottom: rect.bottom - offset
	      };
	    }
	  }, {
	    key: 'setWillChange',
	    value: function setWillChange() {
	      var styles = this.attr ? Object.keys(this.attr) : [];
	      if (styles.indexOf('transform') === -1) {
	        styles.unshift('transform');
	      }
	      for (var i = 0, l = styles.length; i < l; i++) {
	        styles[i] = (0, _stylePrefixer.getPrefix)(styles[i]);
	      }
	      this.setStyle((0, _stylePrefixer.getPrefix)('willChange'), styles.join(','));
	    }
	  }, {
	    key: 'setState',
	    value: function setState(y, percent) {
	      if (y < 0) {
	        y = (this.offset + y) * this.ratioUp - this.offset * this.ratioUp;
	      } else {
	        y = (this.offset + y) * this.ratio - this.offset * this.ratio;
	      }
	      if (this.state.y !== y) {
	        this.state.y = y;
	        this.state.percent = percent;
	        this.render();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var transform = 'translateY(' + this.state.y + 'px)';
	      if (this.attr) {
	        Object.keys(this.attr).forEach(function (key) {
	          var unit = _this2.attr[key].unit || '';
	          var value = _this2.attr[key].from - (_this2.attr[key].from - _this2.attr[key].to) * _this2.state.percent + unit;
	          if (key === 'transform') {
	            transform += ' ' + _this2.attr[key].prop + '(' + value + ')';
	          } else {
	            _this2.node.style[(0, _stylePrefixer.getPrefix)(key)] = value;
	          }
	        });
	      }
	      this.node.style[(0, _stylePrefixer.getPrefix)('transform')] = transform;
	    }
	  }, {
	    key: 'setStyle',
	    value: function setStyle(prop, value) {
	      this.node.style[(0, _stylePrefixer.getPrefix)(prop)] = value;
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.node = null;
	      this.options = null;
	    }
	  }]);

	  return ParalluxItem;
	}();

	module.exports = exports['default'];

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function isEmpty(obj) {
	  if (obj) {
	    return Object.keys(obj).length === 0;
	  }
	  return true;
	}

	var EventDispatcher = function () {
	  function EventDispatcher() {
	    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var target = _ref.target;
	    var currentTarget = _ref.currentTarget;

	    _classCallCheck(this, EventDispatcher);

	    this._eventMap = {};
	    this._destroyed = false;
	    this._target = null;
	    this._currentTarget = null;

	    this._target = target || this;
	    this._currentTarget = currentTarget || this;

	    this.on = this.bind = this.addEventListener = this.addListener;
	    this.off = this.unbind = this.removeEventListener = this.removeListener;
	    this.once = this.one = this.addListenerOnce;
	    this.emit = this.trigger = this.dispatchEvent = this.dispatch;
	  }

	  EventDispatcher.prototype.addListener = function addListener(event, listener) {
	    var listeners = this.getListener(event);
	    if (!listeners) {
	      this._eventMap[event] = [listener];
	    } else if (listeners.indexOf(listener) === -1) {
	      listeners.push(listener);
	    }
	    return this;
	  };

	  EventDispatcher.prototype.addListenerOnce = function addListenerOnce(event, listener) {
	    var _this = this;

	    var _f = function f2(e) {
	      listener(e);
	      _this.off(event, _f);
	      _f = null;
	    };
	    return this.on(event, _f);
	  };

	  EventDispatcher.prototype.removeListener = function removeListener(event, listener) {
	    if (!listener) {
	      return this.removeAllListener(event);
	    }

	    var listeners = this.getListener(event);
	    if (listeners) {
	      var i = listeners.indexOf(listener);
	      if (i > -1) {
	        listeners.splice(i, 1);
	        if (!listeners.length) {
	          delete this._eventMap[event];
	        }
	      }
	    }
	    return this;
	  };

	  EventDispatcher.prototype.removeAllListener = function removeAllListener(event) {
	    var listeners = this.getListener(event);
	    if (listeners) {
	      this._eventMap[event].length = 0;
	      delete this._eventMap[event];
	    }
	    return this;
	  };

	  EventDispatcher.prototype.hasListener = function hasListener(event) {
	    return this.getListener(event) !== null;
	  };

	  EventDispatcher.prototype.hasListeners = function hasListeners() {
	    return this._eventMap !== null && this._eventMap !== undefined && !isEmpty(this._eventMap);
	  };

	  EventDispatcher.prototype.dispatch = function dispatch(eventType, eventObject) {
	    var listeners = this.getListener(eventType);

	    if (listeners) {
	      var evtObj = eventObject || {};
	      evtObj.type = eventType;
	      evtObj.target = evtObj.target || this._target;
	      evtObj.currentTarget = evtObj.currentTarget || this._currentTarget;

	      var i = -1;
	      while (++i < listeners.length) {
	        listeners[i](evtObj);
	      }
	    }
	    return this;
	  };

	  EventDispatcher.prototype.getListener = function getListener(event) {
	    var result = this._eventMap ? this._eventMap[event] : null;
	    return result || null;
	  };

	  EventDispatcher.prototype.destroy = function destroy() {
	    if (this._eventMap) {
	      var keys = Object.keys(this._eventMap);
	      for (var i = 0; i < keys.length; i++) {
	        this.removeAllListener(keys[i]);
	      }
	    }

	    this._eventMap = null;
	    this._destroyed = true;
	    return this;
	  };

	  return EventDispatcher;
	}();

	exports.default = EventDispatcher;
	module.exports = exports['default'];

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(2);


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _objectAssign = __webpack_require__(1);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var LazyTaskCreator = function LazyTaskCreator(Task, options) {
	  _classCallCheck(this, LazyTaskCreator);

	  this.creator = function (lazyView) {
	    return new Task(lazyView, options);
	  };
	};

	exports.default = LazyTaskCreator;
	module.exports = exports['default'];

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _eventdispatcher = __webpack_require__(3);

	var _eventdispatcher2 = _interopRequireDefault(_eventdispatcher);

	var _scrollEvents = __webpack_require__(6);

	var _scrollEvents2 = _interopRequireDefault(_scrollEvents);

	var _lazytaskcreator = __webpack_require__(4);

	var _lazytaskcreator2 = _interopRequireDefault(_lazytaskcreator);

	var _objectAssign = __webpack_require__(1);

	var _objectAssign2 = _interopRequireDefault(_objectAssign);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var isPlainObject = function isPlainObject(obj) {
	  return Object.prototype.toString.call(obj) == '[object Object]';
	};
	var isArray = function isArray(arr) {
	  return Object.prototype.toString.call(arr) === '[object Array]';
	};
	var isLazyTaskCreator = function isLazyTaskCreator(obj) {
	  return obj && obj.hasOwnProperty('creator');
	};

	var defaults = {
	  ignoreInitial: false,
	  enterClass: '',
	  exitClass: '',
	  init: null,
	  threshold: 0,
	  offsets: null // {myoffset:100}
	};

	var getAbsolutBoundingRect = function getAbsolutBoundingRect(el, fixedHeight) {
	  var rect = el.getBoundingClientRect();
	  var height = fixedHeight || rect.height;
	  var top = rect.top + _scrollEvents2.default.windowScrollY + height;
	  return {
	    top: top,
	    bottom: rect.bottom + _scrollEvents2.default.windowScrollY - height,
	    height: height,
	    width: rect.width,
	    left: rect.left,
	    right: rect.right
	  };
	};

	var LazyView = function (_EventDispatcher) {
	  _inherits(LazyView, _EventDispatcher);

	  _createClass(LazyView, null, [{
	    key: 'apply',
	    value: function apply(elements) {

	      if (elements && elements.length) {
	        var collection = new LazyViewCollection();

	        for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	          rest[_key - 1] = arguments[_key];
	        }

	        for (var i = 0; i < elements.length; i++) {
	          collection.push(new (Function.prototype.bind.apply(LazyView, [null].concat([elements[i]], rest)))());
	        }
	        return collection;
	      }

	      return new LazyView(elements, (0, _objectAssign2.default)({}, options), tasks);
	    }
	  }, {
	    key: 'plugin',
	    value: function plugin(creator) {
	      return new _lazytaskcreator2.default(creator);
	    }
	  }]);

	  function LazyView() {
	    _classCallCheck(this, LazyView);

	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    if (!args.length) {
	      throw 'non initialization object';
	    }

	    var elements;
	    if (args[0] instanceof window.NodeList) {
	      elements = [].slice.call(args[0], 1);
	      // return LazyView.apply(elements, args.splice(1,args.length));
	      args[0] = args[0][0];
	    }

	    var el = args[0].tagName !== undefined ? args[0] : null;
	    var options = {};
	    var tasks = [];

	    if (args.length === 2) {

	      if (typeof args[1] !== 'undefined') {
	        if (isLazyTaskCreator(args[1])) {
	          tasks.push(args[1]);
	        } else if (isArray(args[1])) {
	          tasks.concat(args[1]);
	        } else if (isPlainObject(args[1])) {
	          options = args[1];
	        }
	      }
	    } else if (args.length === 3) {

	      if (typeof args[1] !== 'undefined') {
	        if (isLazyTaskCreator(args[1])) {
	          tasks.push(args[1]);
	        } else if (isArray(args[1])) {
	          tasks = tasks.concat(args[1]);
	        } else if (isPlainObject(args[1])) {
	          options = args[1];
	        }
	      }
	      if (typeof args[2] !== 'undefined') {
	        if (isLazyTaskCreator(args[2])) {
	          tasks.push(args[2]);
	        } else if (isArray(args[2])) {
	          tasks = tasks.concat(args[2]);
	        } else if (isPlainObject(args[2])) {
	          options = args[2];
	        }
	      }
	    }

	    var _this = _possibleConstructorReturn(this, (LazyView.__proto__ || Object.getPrototypeOf(LazyView)).call(this, { target: el }));

	    _this.el = el;
	    _this.tasks = tasks;
	    _this.options = (0, _objectAssign2.default)({}, defaults, options);

	    _this.init();

	    if (elements && elements.length) {
	      var _ret;

	      var collection = LazyView.apply.apply(LazyView, [elements].concat(_toConsumableArray(args.splice(1, args.length))));
	      collection.push(_this);
	      return _ret = collection, _possibleConstructorReturn(_this, _ret);
	    }
	    return _this;
	  }

	  _createClass(LazyView, [{
	    key: 'init',
	    value: function init() {
	      var _this2 = this;

	      this.isInitial = true;

	      this.state = {
	        inView: false
	      };

	      this.offsetStates = {};

	      this.offsetKeys = this.options.offsets ? Object.keys(this.options.offsets) : null;

	      this.onScroll = this.onScroll.bind(this);
	      this.onResize = this.update.bind(this);

	      var scrollTarget = _scrollEvents2.default.getScrollParent(this.el);
	      this.scroll = _scrollEvents2.default.getInstance(scrollTarget);
	      this.scroll.on('scroll:start', this.onScroll);
	      this.scroll.on('scroll:progress', this.onScroll);
	      this.scroll.on('scroll:stop', this.onScroll);
	      this.scroll.on('scroll:resize', this.onResize);

	      window.addEventListener('orientationchange', this.onResize, false);

	      var onLoad = function onLoad() {
	        _this2.update();
	        window.removeEventListener('load', onLoad);
	      };

	      window.addEventListener('load', onLoad, false);

	      var i = -1;
	      while (++i < this.tasks.length) {
	        this.tasks[i].creator(this);
	      }

	      this.cachePosition();
	      this.onScroll();
	    }
	  }, {
	    key: 'addOffset',
	    value: function addOffset(name, value) {
	      this.options.offsets = this.options.offsets || {};
	      this.options.offsets[name] = value;
	      this.offsetKeys = Object.keys(this.options.offsets);
	    }
	  }, {
	    key: 'removeOffset',
	    value: function removeOffset(name) {
	      if (this.options.offsets && this.options.offsets.hasOwnProperty(name)) {
	        delete this.options.offsets[name];
	        this.offsetKeys = Object.keys(this.options.offsets);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (this.options.enterClass || this.options.exitClass) {
	        var directionY = this.scroll.directionY;
	        if (this.state.inView) {
	          !!this.options.enterClass && this.el.classList.add(this.options.enterClass, directionY < 1 ? 'view-top' : 'view-bottom');
	          !!this.options.exitClass && this.el.classList.remove(this.options.exitClass);
	        } else {
	          !!this.options.enterClass && this.el.classList.remove(this.options.enterClass, 'view-top', 'view-bottom');
	          !!this.options.exitClass && this.el.classList.add(this.options.exitClass, directionY < 1 ? 'view-top' : 'view-bottom');
	        }
	      }
	    }
	  }, {
	    key: 'onScroll',
	    value: function onScroll() {

	      this.updateViewState();

	      if (this.offsetKeys) {
	        var keys = this.offsetKeys;
	        var i = -1;
	        var l = keys.length;
	        while (++i < l) {
	          var key = keys[i];
	          var value = this.options.offsets[key];

	          if (this.isInView(value)) {
	            if (!this.offsetStates[key]) {
	              this.offsetStates[key] = true;
	              this.dispatch('enter:' + key);
	            }
	          } else {
	            if (this.offsetStates[key]) {
	              this.offsetStates[key] = false;
	              this.dispatch('exit:' + key);
	            }
	          }
	        }
	      }
	    }
	  }, {
	    key: 'update',
	    value: function update() {
	      this.cachePosition();
	      this.onScroll();
	    }
	  }, {
	    key: 'isInView',
	    value: function isInView() {
	      var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	      var scrollY = this.scroll.y;
	      return scrollY <= this.position.top - offset && scrollY + this.scroll.clientHeight >= this.position.bottom + offset;
	    }
	  }, {
	    key: 'updateViewState',
	    value: function updateViewState() {
	      if (this.isInView(this.options.threshold)) {
	        if (!this.state.inView) {
	          this.setState({ inView: true }, !this.options.enterClass);
	          if (!this.isInitial || !this.options.ignoreInitial) {
	            if (this.options.init) {
	              this.options.init.call(this);
	            }
	            this.dispatch(LazyView.ENTER);
	          }
	        }
	      } else {
	        if (this.state.inView) {
	          this.setState({ inView: false }, !this.options.enterClass);
	          if (!this.isInitial || !this.options.ignoreInitial) {
	            this.dispatch(LazyView.EXIT);
	          }
	        }
	      }

	      this.isInitial = false;
	    }
	  }, {
	    key: 'cachePosition',
	    value: function cachePosition() {
	      this.position = getAbsolutBoundingRect(this.el);
	    }
	  }, {
	    key: 'setState',
	    value: function setState(newState, silent) {
	      this.state = (0, _objectAssign2.default)({}, this.state, newState);
	      if (silent !== true) {
	        this.render();
	      }
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {

	      if (this.scroll) {
	        this.scroll.off('scroll:start', this.onScroll);
	        this.scroll.off('scroll:progress', this.onScroll);
	        this.scroll.off('scroll:stop', this.onScroll);
	        this.scroll.off('scroll:resize', this.onResize);

	        if (!this.scroll.hasListeners()) {
	          this.scroll.destroy();
	          this.scroll = null;
	        }
	      }

	      if (typeof window !== 'undefined') {
	        window.removeEventListener('orientationchange', this.onResize);
	      }

	      this.onScroll = null;
	      this.onResize = null;

	      this.position = null;
	      this.options = null;
	      this.el = null;
	    }
	  }]);

	  return LazyView;
	}(_eventdispatcher2.default);

	LazyView.ENTER = 'enter';
	LazyView.EXIT = 'exit';
	LazyView.ENTER_OFFSET = 'enter:offset';
	LazyView.EXIT_OFFSET = 'exit:offset';
	exports.default = LazyView;

	var LazyViewCollection = function (_EventDispatcher2) {
	  _inherits(LazyViewCollection, _EventDispatcher2);

	  function LazyViewCollection() {
	    _classCallCheck(this, LazyViewCollection);

	    var _this3 = _possibleConstructorReturn(this, (LazyViewCollection.__proto__ || Object.getPrototypeOf(LazyViewCollection)).call(this));

	    _this3.items = [];
	    return _this3;
	  }

	  _createClass(LazyViewCollection, [{
	    key: 'push',
	    value: function push(lazyView) {
	      this.items.push(lazyView);
	    }
	  }, {
	    key: 'addListener',
	    value: function addListener(event, listener) {
	      var i = -1;
	      while (++i < this.items.length) {
	        this.items[i].addListener(event, listener);
	      }
	      return this;
	    }
	  }, {
	    key: 'removeListener',
	    value: function removeListener(event, listener) {
	      var i = -1;
	      while (++i < this.items.length) {
	        this.items[i].removeListener(event, listener);
	      }
	      return this;
	    }
	  }]);

	  return LazyViewCollection;
	}(_eventdispatcher2.default);

	module.exports = exports['default'];

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _eventdispatcher = __webpack_require__(8);

	var _eventdispatcher2 = _interopRequireDefault(_eventdispatcher);

	var _scrollParent = __webpack_require__(7);

	var _scrollParent2 = _interopRequireDefault(_scrollParent);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var ScrollEvents = function (_EventDispatcher) {
	  _inherits(ScrollEvents, _EventDispatcher);

	  _createClass(ScrollEvents, null, [{
	    key: 'getInstance',
	    value: function getInstance(scrollTarget, options) {
	      if (!scrollTarget.scrollEvents) {
	        return new ScrollEvents(scrollTarget, options);
	      }
	      return scrollTarget.scrollEvents;
	    }
	  }, {
	    key: 'hasInstance',
	    value: function hasInstance(scrollTarget) {
	      return typeof scrollTarget.scrollEvents !== 'undefined';
	    }
	  }, {
	    key: 'getScrollParent',
	    value: function getScrollParent(element) {
	      return (0, _scrollParent2.default)(element);
	    }
	  }, {
	    key: 'unprefixAnimationFrame',
	    value: function unprefixAnimationFrame() {
	      if (!window.requestAnimationFrame) {
	        window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
	        window.cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;
	      }
	    }
	  }, {
	    key: 'directionToString',
	    value: function directionToString(direction) {
	      switch (direction) {
	        case ScrollEvents.UP:
	          return 'up';
	        case ScrollEvents.DOWN:
	          return 'down';
	        case ScrollEvents.NONE:
	          return 'none';
	        case ScrollEvents.LEFT:
	          return 'left';
	        case ScrollEvents.RIGHT:
	          return 'right';
	      }
	    }
	  }, {
	    key: 'windowScrollY',
	    get: function get() {
	      return window.pageYOffset || window.scrollY || 0;
	    }
	  }, {
	    key: 'windowScrollX',
	    get: function get() {
	      return window.pageXOffset || window.scrollX || 0;
	    }
	  }, {
	    key: 'documentHeight',
	    get: function get() {
	      return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);
	    }
	  }, {
	    key: 'documentWidth',
	    get: function get() {
	      return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);
	    }
	  }]);

	  function ScrollEvents() {
	    var scrollTarget = arguments.length <= 0 || arguments[0] === undefined ? window : arguments[0];
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    _classCallCheck(this, ScrollEvents);

	    if (ScrollEvents.hasScrollTarget(scrollTarget)) {
	      var _ret;

	      return _ret = ScrollEvents.getInstance(scrollTarget), _possibleConstructorReturn(_this, _ret);
	    }

	    var _this = _possibleConstructorReturn(this, (ScrollEvents.__proto__ || Object.getPrototypeOf(ScrollEvents)).call(this, { target: scrollTarget }));

	    scrollTarget.scrollEvents = _this;
	    _this._scrollTarget = scrollTarget;
	    _this.options = options;

	    if (Can.animationFrame) {
	      ScrollEvents.unprefixAnimationFrame();
	    }

	    _this.init();

	    return _this;
	  }

	  _createClass(ScrollEvents, [{
	    key: 'init',
	    value: function init() {

	      this._destroyed = false;
	      this._scrollY = 0;
	      this._scrollX = 0;
	      this._speedY = 0;
	      this._speedX = 0;
	      this._lastSpeed = 0;
	      this._lastDirectionY = ScrollEvents.NONE;
	      this._lastDirectionX = ScrollEvents.NONE;
	      this._stopFrames = 3;
	      this._currentStopFrames = 0;
	      this._firstRender = true;
	      this._directionY = ScrollEvents.NONE;
	      this._directionX = ScrollEvents.NONE;
	      this._scrolling = false;
	      this._canScrollY = false;
	      this._canScrollX = false;

	      this.getScrollPosition = this._scrollTarget === window ? this._getWindowScrollPosition.bind(this) : this._getElementScrollPosition.bind(this);

	      this.onScroll = this.onScroll.bind(this);
	      this.onResize = this.onResize.bind(this);
	      this.onNextFrame = this.onNextFrame.bind(this);

	      this.updateScrollPosition();

	      this._canScrollY = this.clientHeight < this.scrollHeight;
	      this._canScrollX = this.clientWidth < this.scrollWidth;
	      if (this._scrollTarget !== window) {
	        var style = window.getComputedStyle(this._scrollTarget);
	        this._canScrollY = style['overflow-y'] !== 'hidden';
	        this._canScrollX = style['overflow-x'] !== 'hidden';
	      }

	      if (this._scrollTarget.addEventListener) {
	        // this._scrollTarget.addEventListener('mousewheel', this.onScroll, Can.passiveEvents ? { passive: true } : false);
	        this._scrollTarget.addEventListener('scroll', this.onScroll, false);
	        this._scrollTarget.addEventListener('resize', this.onResize, false);
	      } else if (this._scrollTarget.attachEvent) {
	        // this._scrollTarget.attachEvent('onmousewheel', this.onScroll);
	        this._scrollTarget.attachEvent('scroll', this.onScroll);
	        this._scrollTarget.attachEvent('resize', this.onResize);
	      }
	    }
	  }, {
	    key: 'update',
	    value: function update() {
	      var scrollY = this._scrollY;
	      var scrollX = this._scrollX;
	      this.updateScrollPosition();
	      if (scrollY !== this.y || scrollX !== this.x) {
	        this.trigger(ScrollEvents.EVENT_SCROLL_PROGRESS);
	      }
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      if (!this._destroyed) {
	        this._cancelNextFrame();

	        _get(ScrollEvents.prototype.__proto__ || Object.getPrototypeOf(ScrollEvents.prototype), 'destroy', this).call(this);

	        if (this._scrollTarget.addEventListener) {
	          // this._scrollTarget.removeEventListener('mousewheel', this.onScroll);
	          this._scrollTarget.removeEventListener('scroll', this.onScroll);
	          this._scrollTarget.removeEventListener('resize', this.onResize);
	        } else if (this._scrollTarget.attachEvent) {
	          // this._scrollTarget.detachEvent('onmousewheel', this.onScroll);
	          this._scrollTarget.detachEvent('scroll', this.onScroll);
	          this._scrollTarget.detachEvent('resize', this.onResize);
	        }

	        this.onResize = null;
	        this.onScroll = null;
	        this.getScrollPosition = null;
	        this.onNextFrame = null;
	        this._scrollTarget = null;
	        this._destroyed = true;
	      }
	    }
	  }, {
	    key: 'updateScrollPosition',
	    value: function updateScrollPosition() {

	      this._scrollY = this.scrollY;
	      this._scrollX = this.scrollX;
	    }
	  }, {
	    key: '_getWindowScrollPosition',
	    value: function _getWindowScrollPosition() {
	      return {
	        y: ScrollEvents.windowScrollY,
	        x: ScrollEvents.windowScrollX
	      };
	    }
	  }, {
	    key: '_getElementScrollPosition',
	    value: function _getElementScrollPosition() {
	      return {
	        y: this._scrollTarget.scrollTop,
	        x: this._scrollTarget.scrollLeft
	      };
	    }
	  }, {
	    key: 'onResize',
	    value: function onResize() {
	      this.trigger(ScrollEvents.EVENT_SCROLL_RESIZE);
	    }
	  }, {
	    key: 'onScroll',
	    value: function onScroll() {
	      this._currentStopFrames = 0;
	      if (this._firstRender) {
	        this._firstRender = false;
	        if (this.y > 1 || this.x > 1) {
	          this.updateScrollPosition();
	          this.trigger(ScrollEvents.EVENT_SCROLL_PROGRESS);
	          return;
	        }
	      }

	      if (!this._scrolling) {
	        this._scrolling = true;
	        this._lastDirectionY = ScrollEvents.NONE;
	        this._lastDirectionX = ScrollEvents.NONE;
	        this.trigger(ScrollEvents.EVENT_SCROLL_START);
	        if (Can.animationFrame) {
	          this.nextFrameID = window.requestAnimationFrame(this.onNextFrame);
	        } else {
	          this.onNextFrame();
	        }
	      }
	    }
	  }, {
	    key: 'onNextFrame',
	    value: function onNextFrame() {
	      var _this2 = this;

	      // this._lastSpeed = this.speedY;
	      this._speedY = this._scrollY - this.scrollY;
	      this._speedX = this._scrollX - this.scrollX;

	      var speed = +this.speedY + +this.speedX;
	      if (this._scrolling && speed === 0 && this._currentStopFrames++ > this._stopFrames) {
	        this.onScrollStop();
	        return;
	      }

	      this.updateScrollPosition();

	      if (this._lastDirectionY !== this.directionY) {
	        this.trigger('scroll:' + ScrollEvents.directionToString(this.directionY));
	      }
	      if (this._lastDirectionX !== this.directionX) {
	        this.trigger('scroll:' + ScrollEvents.directionToString(this.directionX));
	      }

	      this._lastDirectionY = this.directionY;
	      this._lastDirectionX = this.directionX;

	      this.trigger(ScrollEvents.EVENT_SCROLL_PROGRESS);

	      if (Can.animationFrame) {
	        this.nextFrameID = window.requestAnimationFrame(this.onNextFrame);
	      } else {
	        this._nextTimeout = setTimeout(function () {
	          _this2.onNextFrame();
	        }, 1000 / 60);
	      }
	    }
	  }, {
	    key: 'onScrollStop',
	    value: function onScrollStop() {

	      this._scrolling = false;
	      this.updateScrollPosition();

	      this.trigger(ScrollEvents.EVENT_SCROLL_STOP);

	      if (this._canScrollY) {
	        if (this.y <= 0) {
	          this.trigger(ScrollEvents.EVENT_SCROLL_MIN);
	        } else if (this.y + this.clientHeight >= this.scrollHeight) {
	          this.trigger(ScrollEvents.EVENT_SCROLL_MAX);
	        }
	      }

	      if (this._canScrollX) {
	        if (this.x <= 0) {
	          this.trigger(ScrollEvents.EVENT_SCROLL_MIN);
	        } else if (this.x + this.clientWidth >= this.scrollWidth) {
	          this.trigger(ScrollEvents.EVENT_SCROLL_MAX);
	        }
	      }

	      this._currentStopFrames = 0;
	      this._cancelNextFrame();
	    }
	  }, {
	    key: '_cancelNextFrame',
	    value: function _cancelNextFrame() {
	      if (Can.animationFrame) {
	        window.cancelAnimationFrame(this.nextFrameID);
	        this.nextFrameID = -1;
	      } else {
	        clearTimeout(this._nextTimeout);
	      }
	    }
	  }, {
	    key: 'destroyed',
	    get: function get() {
	      return this._destroyed;
	    }
	  }, {
	    key: 'scrollPosition',
	    get: function get() {
	      return this.getScrollPosition();
	    }
	  }, {
	    key: 'directionY',
	    get: function get() {
	      if (!this._canScrollY || this.speedY === 0 && !this._scrolling) {
	        this._directionY = ScrollEvents.NONE;
	      } else {
	        if (this.speedY > 0) {
	          this._directionY = ScrollEvents.UP;
	        } else if (this.speedY < 0) {
	          this._directionY = ScrollEvents.DOWN;
	        }
	      }
	      return this._directionY;
	    }
	  }, {
	    key: 'directionX',
	    get: function get() {
	      if (!this._canScrollX || this.speedX === 0 && !this._scrolling) {
	        this._directionX = ScrollEvents.NONE;
	      } else {
	        if (this.speedX > 0) {
	          this._directionX = ScrollEvents.LEFT;
	        } else if (this.speedX < 0) {
	          this._directionX = ScrollEvents.RIGHT;
	        }
	      }
	      return this._directionX;
	    }
	  }, {
	    key: 'attributes',
	    get: function get() {
	      return {
	        y: this.y,
	        x: this.x,
	        speedY: this.speedY,
	        speedX: this.speedX,
	        directionY: this.directionY,
	        directionX: this.directionX
	      };
	    }
	  }, {
	    key: 'scrollTarget',
	    get: function get() {
	      return this._scrollTarget;
	    }
	  }, {
	    key: 'delta',
	    get: function get() {
	      return this.directionY;
	    }
	  }, {
	    key: 'scrolling',
	    get: function get() {
	      return this._scrolling;
	    }
	  }, {
	    key: 'speedY',
	    get: function get() {
	      return this._speedY;
	    }
	  }, {
	    key: 'speedX',
	    get: function get() {
	      return this._speedX;
	    }
	  }, {
	    key: 'scrollY',
	    get: function get() {
	      return this.scrollPosition.y;
	    }
	  }, {
	    key: 'y',
	    get: function get() {
	      return this.scrollY;
	    }
	  }, {
	    key: 'scrollX',
	    get: function get() {
	      return this.scrollPosition.x;
	    }
	  }, {
	    key: 'x',
	    get: function get() {
	      return this.scrollX;
	    }
	  }, {
	    key: 'clientHeight',
	    get: function get() {
	      return this._scrollTarget === window ? window.innerHeight : this._scrollTarget.clientHeight;
	    }
	  }, {
	    key: 'clientWidth',
	    get: function get() {
	      return this._scrollTarget === window ? window.innerWidth : this._scrollTarget.clientWidth;
	    }
	  }, {
	    key: 'scrollHeight',
	    get: function get() {
	      return this._scrollTarget === window ? ScrollEvents.documentHeight : this._scrollTarget.scrollHeight;
	    }
	  }, {
	    key: 'scrollWidth',
	    get: function get() {
	      return this._scrollTarget === window ? ScrollEvents.documentWidth : this._scrollTarget.scrollWidth;
	    }
	  }]);

	  return ScrollEvents;
	}(_eventdispatcher2.default);

	ScrollEvents.hasScrollTarget = ScrollEvents.hasInstance;
	ScrollEvents.UP = -1;
	ScrollEvents.DOWN = 1;
	ScrollEvents.NONE = 0;
	ScrollEvents.RIGHT = 2;
	ScrollEvents.LEFT = -2;
	ScrollEvents.EVENT_SCROLL_PROGRESS = 'scroll:progress';
	ScrollEvents.EVENT_SCROLL_START = 'scroll:start';
	ScrollEvents.EVENT_SCROLL_STOP = 'scroll:stop';
	ScrollEvents.EVENT_SCROLL_DOWN = 'scroll:down';
	ScrollEvents.EVENT_SCROLL_UP = 'scroll:up';
	ScrollEvents.EVENT_SCROLL_MIN = 'scroll:min';
	ScrollEvents.EVENT_SCROLL_MAX = 'scroll:max';
	ScrollEvents.EVENT_SCROLL_RESIZE = 'scroll:resize';
	exports.default = ScrollEvents;

	var Can = function () {
	  function Can() {
	    _classCallCheck(this, Can);
	  }

	  _createClass(Can, null, [{
	    key: 'animationFrame',
	    get: function get() {
	      return !!(window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame);
	    }
	  }]);

	  return Can;
	}();

	module.exports = exports['default'];

/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';

	var regex = /(auto|scroll)/;

	var scrollParent = function scrollParent(element) {

	  if (!(element instanceof HTMLElement)) {
	    return window;
	  }

	  while (element.parentNode) {
	    if (element.parentNode === document.body) {
	      return window;
	    }
	    var style = window.getComputedStyle(element.parentNode, null);
	    if (regex.test(style.getPropertyValue('overflow') + style.getPropertyValue('overflow-y') + style.getPropertyValue('overflow-x'))) {
	      return element.parentNode;
	    }

	    element = element.parentNode;
	  }

	  return window;
	};

	module.exports = scrollParent;

/***/ },
/* 8 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function isEmpty(obj) {
	  for (var prop in obj) {
	    if (obj.hasOwnProperty(prop)) {
	      return false;
	    }
	  }
	  return true;
	}

	var EventDispatcher = function () {
	  function EventDispatcher() {
	    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var target = _ref.target;
	    var currentTarget = _ref.currentTarget;

	    _classCallCheck(this, EventDispatcher);

	    this._eventMap = {};
	    this._destroyed = false;
	    this._target = target || this;
	    this._currentTarget = currentTarget || this;

	    this.on = this.bind = this.addEventListener = this.addListener;
	    this.off = this.unbind = this.removeEventListener = this.removeListener;
	    this.once = this.one = this.addListenerOnce;
	    this.emit = this.trigger = this.dispatchEvent = this.dispatch;
	  }

	  EventDispatcher.prototype.addListener = function addListener(event, listener) {
	    var listeners = this.getListener(event);
	    if (!listeners) {
	      this._eventMap[event] = [listener];
	    } else if (listeners.indexOf(listener) === -1) {
	      listeners.push(listener);
	    }
	    return this;
	  };

	  EventDispatcher.prototype.addListenerOnce = function addListenerOnce(event, listener) {
	    var _this = this;

	    var _f = function f2(e) {
	      listener(e);
	      _this.off(event, _f);
	      listener = null;
	      _f = null;
	    };
	    return this.on(event, _f);
	  };

	  EventDispatcher.prototype.removeListener = function removeListener(event, listener) {

	    if (!listener) {
	      return this.removeAllListener(event);
	    }

	    var listeners = this.getListener(event);
	    if (listeners) {
	      var i = listeners.indexOf(listener);
	      if (i > -1) {
	        listeners = listeners.splice(i, 1);
	        if (!listeners.length) {
	          delete this._eventMap[event];
	        }
	      }
	    }
	    return this;
	  };

	  EventDispatcher.prototype.removeAllListener = function removeAllListener(event) {
	    var listeners = this.getListener(event);
	    if (listeners) {
	      this._eventMap[event].length = 0;
	      delete this._eventMap[event];
	    }
	    return this;
	  };

	  EventDispatcher.prototype.hasListener = function hasListener(event) {
	    return this.getListener(event) !== null;
	  };

	  EventDispatcher.prototype.hasListeners = function hasListeners() {
	    return this._eventMap !== null && this._eventMap !== undefined && !isEmpty(this._eventMap);
	  };

	  EventDispatcher.prototype.dispatch = function dispatch(eventType, eventObject) {
	    var listeners = this.getListener(eventType);

	    if (listeners) {
	      eventObject = eventObject || {};
	      eventObject.type = eventType;
	      eventObject.target = eventObject.target || this._target;
	      eventObject.currentTarget = eventObject.currentTarget || this._currentTarget;

	      var i = -1;
	      while (++i < listeners.length) {
	        listeners[i](eventObject);
	      }
	    }
	    return this;
	  };

	  EventDispatcher.prototype.getListener = function getListener(event) {
	    var result = this._eventMap ? this._eventMap[event] : null;
	    return result || null;
	  };

	  EventDispatcher.prototype.destroy = function destroy() {
	    if (this._eventMap) {
	      for (var i in this._eventMap) {
	        this.removeAllListener(i);
	      }
	      this._eventMap = null;
	    }
	    this._destroyed = true;
	    return this;
	  };

	  return EventDispatcher;
	}();

	exports.default = EventDispatcher;
	module.exports = exports['default'];

/***/ },
/* 9 */
/***/ function(module, exports) {

	var prefixes = ["ms", "Moz", "Webkit", "O"];

	var initialized = false;
	var element = null;
	var actualPrefix = '';

	const properties = [
	  'userSelect',
	  'transform',
	  'transition',
	  'transitionend',
	  'transformOrigin',
	  'transformStyle',
	  'transitionProperty',
	  'transitionDuration',
	  'transitionTimingFunction',
	  'transitionDelay',
	  'borderImage',
	  'borderImageSlice',
	  'boxShadow',
	  'backgroundClip',
	  'backfaceVisibility',
	  'perspective',
	  'perspectiveOrigin',
	  'animation',
	  'animationStart',
	  'animationEnd',
	  'animationDuration',
	  'animationName',
	  'animationDelay',
	  'animationDirection',
	  'animationIteration',
	  'animationIterationCount',
	  'animationTimingFunction',
	  'animationPlayState',
	  'animationFillMode',
	  'appearance'
	];

	const cache = {};
	const getElement = () => {
	  if (element !== null) {
	    return element;
	  }
	  if (typeof document === 'undefined') {
	    console.warn('prefixer is used without document');
	    return { style: {} };
	  } else {
	    element = document.createElement('div');
	  }

	  return element;
	}

	const applyVendorPrefix = (property) => {
	  const el = getElement();
	  if (properties.indexOf(property) === -1 || !!el.style[property]) {
	    return property;
	  }

	  if (initialized) {
	    return actualPrefix + property;
	  } else {
	    initialized = true;
	    var temp;
	    var prop = property.charAt(0).toUpperCase() + property.slice(1);

	    for (var i = 0; i < prefixes.length; i++) {
	      temp = prefixes[i] + prop;
	      if (el.style[temp]) {
	        actualPrefix = prefixes[i].toLocalLowerCase();
	        prefixes = [prefixes[i]];
	        return temp;
	      }
	    }
	  }
	  return property.charAt(0).toLowerCase() + property.slice(1);
	}


	const getPrefix = (property) => {
	  if (!cache[property]) {
	    cache[property] = applyVendorPrefix(property);
	  }
	  return cache[property];
	}

	const prefixer = (obj) => {
	  var result = {};
	  for (var key in obj) {
	    result[getPrefix(key)] = obj[key];
	  }
	  return result;
	};

	exports.getPrefix = getPrefix;
	exports.prefixer = prefixer;
	exports.default = prefixer;


/***/ }
/******/ ])
});
;